val rankingsDF = sqlContext.read.parquet("parquet-1node/rankings.parquet")
rankingsDF.registerTempTable("rankings")

val uservisitsDF = sqlContext.read.parquet("parquet-1node/uservisits.parquet")
uservisitsDF.registerTempTable("uservisits")

val crawlDF = sqlContext.read.parquet("parquet-1node/crawl.parquet")
crawlDF.registerTempTable("documents")

// Query 1
val query1a = sqlContext.sql("SELECT pageURL, pageRank FROM rankings WHERE pageRank > 1000")
query1a.collect()
val query1b = sqlContext.sql("SELECT pageURL, pageRank FROM rankings WHERE pageRank > 100")
query1b.collect()
val query1c = sqlContext.sql("SELECT pageURL, pageRank FROM rankings WHERE pageRank > 10")
query1c.collect()

// Query 2
val query2a = sqlContext.sql("SELECT SUBSTR(sourceIP, 1, 8), SUM(adRevenue) FROM uservisits GROUP BY SUBSTR(sourceIP, 1, 8)")
query2a.collect()
val query2b = sqlContext.sql("SELECT SUBSTR(sourceIP, 1, 10), SUM(adRevenue) FROM uservisits GROUP BY SUBSTR(sourceIP, 1, 10)")
query2b.collect()
val query2c = sqlContext.sql("SELECT SUBSTR(sourceIP, 1, 12), SUM(adRevenue) FROM uservisits GROUP BY SUBSTR(sourceIP, 1, 12)")
query2c.collect()

// Query 3
val query3a = sqlContext.sql("""SELECT sourceIP, sum(adRevenue) as totalRevenue, avg(pageRank) as pageRank FROM rankings R JOIN (SELECT sourceIP, destURL, adRevenue FROM uservisits UV WHERE UV.visitDate > "1980-01-01" AND UV.visitDate < "1980-04-01") NUV ON (R.pageURL = NUV.destURL) GROUP BY sourceIP ORDER BY totalRevenue DESC LIMIT 1""")
query3a.collect()														
val query3b = sqlContext.sql("""SELECT sourceIP, sum(adRevenue) as totalRevenue, avg(pageRank) as pageRank FROM rankings R JOIN (SELECT sourceIP, destURL, adRevenue FROM uservisits UV WHERE UV.visitDate > "1980-01-01" AND UV.visitDate < "1983-01-01") NUV ON (R.pageURL = NUV.destURL) GROUP BY sourceIP ORDER BY totalRevenue DESC LIMIT 1""")
query3b.collect()
val query3c = sqlContext.sql("""SELECT sourceIP, sum(adRevenue) as totalRevenue, avg(pageRank) as pageRank FROM rankings R JOIN (SELECT sourceIP, destURL, adRevenue FROM uservisits UV WHERE UV.visitDate > "1980-01-01" AND UV.visitDate < "2010-01-01") NUV ON (R.pageURL = NUV.destURL) GROUP BY sourceIP ORDER BY totalRevenue DESC LIMIT 1""")
query3c.collect()

